//
// Generated file, do not edit! Created by opp_msgtool 6.0 from src/node/ContactTracingMessage.msg.
//

#ifndef __CONTACTTRACINGMESSAGE_M_H
#define __CONTACTTRACINGMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>
#include "inet/common/geometry/common/Coord.h"

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class ContactTracingMessage;
/**
 * Class generated from <tt>src/node/ContactTracingMessage.msg:19</tt> by opp_msgtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * message ContactTracingMessage
 * {
 *     double position[2];
 *     string UUID;
 * }
 * </pre>
 */
class ContactTracingMessage : public ::omnetpp::cMessage
{
  protected:
    double position[3] = {0};
    omnetpp::opp_string UUID;

  private:
    void copy(const ContactTracingMessage& other);

  protected:
    bool operator==(const ContactTracingMessage&) = delete;

  public:
    ContactTracingMessage(const char *name=nullptr, short kind=0);
    ContactTracingMessage(const ContactTracingMessage& other);
    virtual ~ContactTracingMessage();
    ContactTracingMessage& operator=(const ContactTracingMessage& other);
    virtual ContactTracingMessage *dup() const override {return new ContactTracingMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual size_t getPositionArraySize() const;
    virtual double getPosition(size_t k) const;
    virtual void setPosition(size_t k, double position);

    virtual const char * getUUID() const;
    virtual void setUUID(const char * UUID);
    static ContactTracingMessage* ctMessageFactory(inet::Coord coord, omnetpp::opp_string uuid);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ContactTracingMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ContactTracingMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline ContactTracingMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<ContactTracingMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __CONTACTTRACINGMESSAGE_M_H

