//
// Generated file, do not edit! Created by opp_msgtool 6.0 from src/node/msg/ContactTracingMessage.msg.
//

#ifndef __CONTACTTRACINGMESSAGE_M_H
#define __CONTACTTRACINGMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class ContactTracingMessage;
// cplusplus {{
#include "ContactData.h"
#include "inet/common/geometry/common/Coord.h"
// }}

/**
 * Class generated from <tt>src/node/msg/ContactTracingMessage.msg:32</tt> by opp_msgtool.
 * <pre>
 * message ContactTracingMessage
 * {
 *     inet::Coord coord;
 *     ContactData data;
 * }
 * </pre>
 */
class ContactTracingMessage : public ::omnetpp::cMessage
{
  protected:
    inet::Coord coord;
    ContactData data;

  private:
    void copy(const ContactTracingMessage& other);

  protected:
    bool operator==(const ContactTracingMessage&) = delete;

  public:
    ContactTracingMessage(const char *name=nullptr, short kind=0);
    ContactTracingMessage(const ContactTracingMessage& other);
    virtual ~ContactTracingMessage();
    ContactTracingMessage& operator=(const ContactTracingMessage& other);
    virtual ContactTracingMessage *dup() const override {return new ContactTracingMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const inet::Coord& getCoord() const;
    virtual inet::Coord& getCoordForUpdate() { return const_cast<inet::Coord&>(const_cast<ContactTracingMessage*>(this)->getCoord());}
    virtual void setCoord(const inet::Coord& coord);

    virtual const ContactData& getData() const;
    virtual ContactData& getDataForUpdate() { return const_cast<ContactData&>(const_cast<ContactTracingMessage*>(this)->getData());}
    virtual void setData(const ContactData& data);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ContactTracingMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ContactTracingMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

inline any_ptr toAnyPtr(const ContactData *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline ContactData *fromAnyPtr(any_ptr ptr) { return ptr.get<ContactData>(); }
inline any_ptr toAnyPtr(const inet::Coord *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline inet::Coord *fromAnyPtr(any_ptr ptr) { return ptr.get<inet::Coord>(); }
template<> inline ContactTracingMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<ContactTracingMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __CONTACTTRACINGMESSAGE_M_H

